# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gok4Gwmz6HyU0BgKlnFfa1KJr496u12a
"""

def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))
print(reverse_string_words("I enjoy Python programming"))

keys = ['Hindi', 'English', 'Marathi','Urdu']
values = ['H N D','N G L S H', 'M R T H', 'R D']
color_dictionary = dict(zip(keys, values))
print(color_dictionary)

tuplex = ("tuple", False, 3.2, 1)
print(tuplex)

tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7, 4, 5, 6, 4
print(tuplex)
count = tuplex.count(4)
print(count)

L = [5, 4, 2, 5, 6, 1]
res = []
  
for i in range(len(L)):
    res.append((L[i], i))
      
print("List of Tuples")
print(res)

test_tup1 = (3, 4),
test_tup2 = (5, 6),
print("The original tuple 1 : " + str(test_tup1))
print("The original tuple 2 : " + str(test_tup2))
res = test_tup1 + test_tup2
print("Tuples after Concatenating : " + str(res))

class Circle():
    def __init__(self, r):
        self.radius = r

    def area(self):
        return self.radius**2*3.14
    
    def perimeter(self):
        return 2*self.radius*3.14

NewCircle = Circle(8)
print(NewCircle.area())
print(NewCircle.perimeter())

import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print("Original array:")
print(arra_data)
print("\nExtracted data: All the elements of the second columns")
print(arra_data[:,[1]])

result_str="";    
for row in range(0,7):    
    for column in range(0,7):     
        if (column == 1 or ((row == 0 or row == 6) and (column > 1 and column < 5)) or (column == 5 and row != 0 and row != 6)):  
            result_str=result_str+"*"    
        else:      
            result_str=result_str+" "    
    result_str=result_str+"\n"    
print(result_str);

def sum(n):
    if n == 0:
        return 1
    return 1 / pow(3, n) + sum(n-1)
 
n = 5; 
print(sum(n));

import pandas as pd
ds1 = pd.Series([2, 4, 6, 8, 10])
ds2 = pd.Series([1, 3, 5, 7, 9])
ds = ds1 + ds2
print("Add two Series:")
print(ds)
print("Subtract two Series:")
ds = ds1 - ds2
print(ds)
print("Multiply two Series:")
ds = ds1 * ds2
print(ds)
print("Divide Series1 by Series2:")
ds = ds1 / ds2
print(ds)

def student_data(student_id, **kwargs):
    print(f'\nStudent ID: {student_id}')
    if 'student_name' in kwargs:
        print(f"Student Name: $ {kwargs['student_name']}")
    
    if 'student_name' and 'student_class' in kwargs:
            print(f"\nStudent Name: $ {kwargs['student_name']}")
            print(f"Student Class: $ {kwargs['student_class']}")

 
student_data(student_id='SV12', student_name='Jean Garner')

student_data(student_id='SV12', student_name='Jean Garner', student_class ='V')